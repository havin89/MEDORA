/**
 * ML Integration for Medora Health Alert
 * Connects frontend to Python ML API for blood disease prediction
 */

// API Configuration
// Use environment variable if available, otherwise fallback to localhost
const ML_API_BASE = window.ML_API_BASE_URL || 'http://localhost:5001';
const ML_API_URL = `${ML_API_BASE}/api/predict`;
const ML_API_HEALTH = `${ML_API_BASE}/api/health`;

/**
 * Check if ML API is available
 */
async function checkMLAPIHealth() {
  try {
    const response = await fetch(ML_API_HEALTH);
    if (response.ok) {
      const data = await response.json();
      console.log('‚úì ML API is healthy:', data);
      return true;
    }
    return false;
  } catch (error) {
    console.warn('ML API not available:', error.message);
    return false;
  }
}

/**
 * Call ML API to predict disease from blood analysis
 * @param {Object} bloodData - Blood analysis parameters
 * @returns {Promise<Object>} Prediction results
 */
async function predictDisease(bloodData) {
  try {
    const response = await fetch(ML_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(bloodData)
    });

    if (!response.ok) {
      throw new Error(`API returned ${response.status}`);
    }

    const result = await response.json();
    console.log('ML Prediction result:', result);
    return result;
  } catch (error) {
    console.error('Error calling ML API:', error);
    throw error;
  }
}

/**
 * Generate patient-friendly report (hides disease name)
 * @param {Object} patient - Patient data
 * @param {Object} prediction - ML prediction result
 * @returns {string} HTML for patient report
 */
function generatePatientReport(patient, prediction) {
  const riskClass = prediction.risk_level.toLowerCase();
  const riskColor = {
    'low': 'badge-low',
    'medium': 'badge-med',
    'high': 'badge-high'
  }[riskClass] || 'badge-info';

  // Determine health status message without revealing disease
  let healthStatus = 'Your Health Status';
  let statusMessage = prediction.patient_message;
  
  if (prediction.disease === 'Healthy') {
    healthStatus = 'Excellent Health';
  } else {
    healthStatus = 'Health Check Recommended';
  }

  // Build abnormal parameters section
  let abnormalParamsHTML = '';
  if (prediction.abnormal_parameters && prediction.abnormal_parameters.length > 0) {
    abnormalParamsHTML = `
      <div class="report-card">
        <h3 class="section-subtitle"> ${t('abnormalParams')}</h3>
        <ul class="kv-list">
          ${prediction.abnormal_parameters.slice(0, 5).map(param => {
            const icon = param.status === 'high' ? '‚Üë' : '‚Üì';
            const statusClass = param.status === 'high' ? 'badge-high' : 'badge-med';
            return `<li><span class="badge ${statusClass}">${icon} ${param.parameter}</span> ${param.value.toFixed(2)} (normal: ${param.normal_range})</li>`;
          }).join('')}
        </ul>
      </div>
    `;
  }

  // Build recommendations
  const recommendationsHTML = `
    <div class="report-card">
      <h3 class="section-subtitle"> ${t('yourActionPlan')}</h3>
      <ul class="kv-list">
        ${prediction.patient_recommendations.slice(0, 5).map(rec => `<li>${rec}</li>`).join('')}
      </ul>
    </div>
  `;

  return `
    <div class="ai-report-box">
      <div class="risk-meter">
        <span class="risk-label ${riskClass}">${healthStatus}</span>
        <div class="risk-bar"><div class="risk-fill ${riskClass}" style="width: ${prediction.confidence_percentage}%"></div></div>
        <span class="confidence-text">${t('confidence')}: ${prediction.confidence_percentage}%</span>
      </div>
      <p class="health-message">${statusMessage}</p>
      
      <div class="report-grid">
        ${abnormalParamsHTML}
        ${recommendationsHTML}
        <div class="report-card">
          <h3 class="section-subtitle"> ${t('healthTips')}</h3>
          <ul class="kv-list">
            <li>Schedule regular check-ups with your doctor</li>
            <li>Keep track of your symptoms and medications</li>
            <li>Maintain a healthy lifestyle with balanced diet and exercise</li>
          </ul>
        </div>
      </div>
      
      <div class="report-footer" style="margin-top: 20px; padding: 15px; background: #f0f8ff; border-radius: 8px;">
        <p style="margin: 0; font-size: 14px; color: #555;">
          <strong>Note:</strong> This report is generated by AI analysis of your blood test results. 
          Please consult with your doctor for proper medical advice and interpretation.
        </p>
      </div>
    </div>
  `;
}

/**
 * Generate doctor report (includes disease prediction)
 * @param {Object} patient - Patient data
 * @param {Object} prediction - ML prediction result
 * @returns {string} HTML for doctor report
 */
function generateDoctorReport(patient, prediction) {
  const riskClass = prediction.risk_level.toLowerCase();
  const riskColor = {
    'low': 'badge-low',
    'medium': 'badge-med',
    'high': 'badge-high'
  }[riskClass] || 'badge-info';

  // Build probability bars
  const probabilitiesHTML = Object.entries(prediction.probabilities)
    .sort((a, b) => b[1] - a[1])
    .map(([disease, prob]) => {
      const percentage = (prob * 100).toFixed(1);
      const barWidth = prob * 100;
      const isTop = disease === prediction.disease;
      return `
        <div class="prob-item" style="margin-bottom: 8px;">
          <div style="display: flex; justify-content: space-between; margin-bottom: 4px;">
            <span style="font-weight: ${isTop ? 'bold' : 'normal'};">${disease}</span>
            <span style="font-weight: ${isTop ? 'bold' : 'normal'};">${percentage}%</span>
          </div>
          <div style="background: #e0e0e0; height: 8px; border-radius: 4px; overflow: hidden;">
            <div style="background: ${isTop ? '#4A90E2' : '#95c9f5'}; width: ${barWidth}%; height: 100%;"></div>
          </div>
        </div>
      `;
    }).join('');

  // Build abnormal parameters
  let abnormalParamsHTML = '';
  if (prediction.abnormal_parameters && prediction.abnormal_parameters.length > 0) {
    abnormalParamsHTML = `
      <div class="report-card">
        <h3 class="section-subtitle"> ${t('abnormalParams')}</h3>
        <ul class="kv-list">
          ${prediction.abnormal_parameters.map(param => {
            const icon = param.status === 'high' ? '‚Üë' : '‚Üì';
            const statusClass = param.status === 'high' ? 'badge-high' : 'badge-med';
            return `<li><span class="badge ${statusClass}">${icon} ${param.parameter}</span> ${param.value.toFixed(2)} (normal: ${param.normal_range})</li>`;
          }).join('')}
        </ul>
      </div>
    `;
  }

  // Build clinical recommendations
  const recommendationsHTML = `
    <div class="report-card">
      <h3 class="section-subtitle"> Clinical Recommendations</h3>
      <ul class="kv-list">
        ${prediction.doctor_recommendations.map(rec => `<li>${rec}</li>`).join('')}
      </ul>
    </div>
  `;

  return `
    <div class="pane-nav" style="margin-bottom:10px;">
      <button class="btn-tertiary" type="button" id="backFromMLReport">‚Üê ${t('back')}</button>
    </div>
    
    <h3>${patient.name}'s ML Analysis Report</h3>
    
    <div class="ml-prediction-box" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
        <div>
          <h2 style="margin: 0; color: #2c3e50;">Predicted Condition: <span style="color: #4A90E2;">${prediction.disease}</span></h2>
          <p style="margin: 5px 0 0 0; color: #7f8c8d;">${t('riskLevel')}: <span class="badge ${riskColor}">${prediction.risk_level}</span></p>
        </div>
        <div style="text-align: right;">
          <div style="font-size: 32px; font-weight: bold; color: #4A90E2;">${prediction.confidence_percentage}%</div>
          <div style="font-size: 14px; color: #7f8c8d;">${t('confidence')}</div>
        </div>
      </div>
      
      <div style="background: white; padding: 15px; border-radius: 6px; margin-top: 15px;">
        <h4 style="margin-top: 0;">${t('diseaseProbabilities')}</h4>
        ${probabilitiesHTML}
      </div>
    </div>

    <div class="report-grid">
      ${abnormalParamsHTML}
      ${recommendationsHTML}
      <div class="report-card">
        <h3 class="section-subtitle"> ${t('patientInfo')}</h3>
        <ul class="kv-list">
          <li><strong>Age:</strong> ${patient.age}</li>
          <li><strong>Gender:</strong> ${patient.gender}</li>
          <li><strong>BMI:</strong> ${prediction.abnormal_parameters.find(p => p.parameter === 'BMI')?.value.toFixed(1) || 'N/A'}</li>
          <li><strong>Chronic Conditions:</strong> ${(patient.chronic || []).join(', ') || 'None'}</li>
          <li><strong>Current Medications:</strong> ${(patient.activeMedications || []).join(', ') || 'None'}</li>
        </ul>
      </div>
    </div>

    <div class="report-footer" style="margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 8px; border-left: 4px solid #ffc107;">
      <p style="margin: 0; font-size: 14px;">
        <strong>Clinical Note:</strong> ${prediction.description}
      </p>
    </div>
  `;
}

/**
 * Handle Generate Report button click for patients
 * @param {Object} patient - Current patient data
 */
async function handlePatientGenerateReport(patient) {
  console.log('üî¨ Generating report for:', patient?.name);
  
  const reportContainer = document.getElementById('reportContent');
  if (!reportContainer) {
    console.error('‚ùå Report container not found');
    return;
  }

  // Show loading state
  reportContainer.innerHTML = `
    <div style="text-align: center; padding: 60px 20px;">
      <div class="loading-spinner" style="border: 6px solid #f3f3f3; border-top: 6px solid #4A90E2; border-radius: 50%; width: 80px; height: 80px; animation: spin 1s linear infinite; margin: 0 auto 30px;"></div>
      <h3 style="color: #2c3e50; margin-bottom: 10px;">${t('analyzingBlood')}</h3>
      <p style="color: #7f8c8d;">${t('aiProcessing')}</p>
    </div>
  `;

  try {
    // Validate patient object
    if (!patient) {
      throw new Error('Patient data not available');
    }
    
    // Check if patient has blood analysis data
    if (!patient.bloodAnalysis) {
      throw new Error('No blood analysis data available for this patient');
    }

    // Call ML API
    const prediction = await predictDisease(patient.bloodAnalysis);
    console.log('‚úÖ Report generated successfully');

    // Generate and display patient-friendly report
    const reportHTML = generatePatientReport(patient, prediction);
    
    // Update the report section with the full report
    reportContainer.innerHTML = `
      ${reportHTML}
      <div class="ai-buttons" style="margin-top: 30px;">
        <button class="btn-primary" onclick="handlePatientGenerateReport(window.currentPatient)">üîÑ Regenerate Report</button>
      </div>
    `;

  } catch (error) {
    console.error('Error generating report:', error);
    
    // Show error message
    reportContainer.innerHTML = `
      <div style="text-align: center; padding: 40px 20px;">
        <div style="background: #fee; border-left: 4px solid #f44; padding: 20px; border-radius: 8px; max-width: 600px; margin: 0 auto;">
          <h3 style="color: #c00; margin-top: 0;">‚ö†Ô∏è ${t('unableGenerate')}</h3>
          <p style="color: #666;"><strong>${t('mlUnavailable')}</strong> ${error.message}</p>
          <p style="color: #666;">${t('pleaseEnsure')||'Please ensure:'}</p>
          <ul style="text-align: left; color: #666; max-width: 400px; margin: 15px auto;">
            <li>${t('mlCheckList1')}</li>
            <li>${t('mlCheckList2')}</li>
            <li>${t('mlCheckList3')}</li>
          </ul>
          <button class="btn-primary" onclick="handlePatientGenerateReport(window.currentPatient)" style="margin-top: 20px;">üîÑ ${t('tryAgain')}</button>
        </div>
      </div>
    `;
  }
}

/**
 * Handle Generate Report button click for doctors
 * @param {Object} patient - Selected patient data
 */
async function handleDoctorGenerateReport(patient) {
  const reportContainer = document.querySelector('#doc-reports .patient-card');
  if (!reportContainer) return;
  // Update doctor dashboard header with selected patient's name
  try {
    const hdr = document.querySelector('#doc-search h1');
    if (hdr && patient && patient.name) hdr.textContent = `${patient.name} - ${t('dashboardTitle')}`;
  } catch(_){ }

  // Show loading state
  reportContainer.innerHTML = `
    <div style="text-align: center; padding: 40px;">
      <div class="loading-spinner" style="border: 4px solid #f3f3f3; border-top: 4px solid #4A90E2; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; margin: 0 auto 20px;"></div>
      <p>${t('aiProcessing')}</p>
    </div>
  `;

  try {
    // Check if patient has blood analysis data
    if (!patient.bloodAnalysis) {
      throw new Error('No blood analysis data available for this patient');
    }

    // Call ML API
    const prediction = await predictDisease(patient.bloodAnalysis);

    // Generate and display doctor report
    const reportHTML = generateDoctorReport(patient, prediction);
    
    // Update the report section
    reportContainer.innerHTML = reportHTML;

    // Add back button handler
    const backBtn = document.getElementById('backFromMLReport');
    if (backBtn) {
      backBtn.addEventListener('click', () => {
        // Return to search pane
        const searchPane = document.querySelector('#doc-search');
        if (searchPane) {
          document.querySelectorAll('.dashboard-pane').forEach(p => p.classList.remove('is-active'));
          searchPane.classList.add('is-active');
        }
      });
    }

  } catch (error) {
    console.error('Error generating report:', error);
    
    // Show error message
    reportContainer.innerHTML = `
      <div class="pane-nav" style="margin-bottom:10px;">
        <button class="btn-tertiary" type="button" onclick="history.back()">‚Üê Back</button>
      </div>
      <h3>Report Generation Error</h3>
      <div class="alert-banner" style="background: #fee; border-left: 4px solid #f44; padding: 20px;">
        <p><strong>Unable to generate ML report:</strong> ${error.message}</p>
        <p>Please ensure:</p>
        <ul>
          <li>The Python ML API server is running on port 5001</li>
          <li>Patient has blood analysis data</li>
          <li>Network connection is available</li>
        </ul>
        <button class="btn-primary" onclick="handleDoctorGenerateReport(window.currentPatient)">Try Again</button>
      </div>
    `;
  }
}

// Add CSS for loading spinner
const style = document.createElement('style');
style.textContent = `
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .confidence-text {
    font-size: 12px;
    color: #666;
    margin-left: 10px;
  }
  
  .health-message {
    font-size: 16px;
    line-height: 1.6;
    color: #2c3e50;
    margin: 15px 0;
  }
  
  .prob-item {
    transition: all 0.3s ease;
  }
  
  .prob-item:hover {
    transform: translateX(5px);
  }
`;
document.head.appendChild(style);

// Initialize ML API check on page load
document.addEventListener('DOMContentLoaded', () => {
  checkMLAPIHealth();
});

console.log('‚úÖ ML Integration loaded');
